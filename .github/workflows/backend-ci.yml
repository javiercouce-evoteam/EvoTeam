name: Backend CI

on:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'pnpm-lock.yaml'
      - 'pnpm-workspace.yaml'
      - '.github/workflows/backend-ci.yml'
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'pnpm-lock.yaml'
      - 'pnpm-workspace.yaml'

jobs:
  backend-ci:
    name: Backend CI/CD Pipeline
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: 🔍 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type checking
        run: pnpm run type-check

      - name: 🧹 Linting
        run: pnpm run lint

      - name: 💅 Format checking
        run: pnpm run format:check

      - name: 🏗️ Build project
        run: pnpm run build

      - name: 🧪 Run tests (if available)
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            pnpm run test
          else
            echo "No tests found, skipping..."
          fi

      - name: 🔒 Security audit
        run: pnpm audit --audit-level moderate

      - name: 📊 Bundle size check
        run: |
          if [ -d "dist" ]; then
            echo "📦 Build output size:"
            du -sh dist/
            find dist -name "*.js" -exec wc -c {} + | sort -n
          fi

      - name: ✅ CI Success
        if: success()
        run: |
          echo "🎉 All checks passed successfully!"
          echo "✅ Type checking: PASSED"
          echo "✅ Linting: PASSED" 
          echo "✅ Formatting: PASSED"
          echo "✅ Build: PASSED"
          echo "✅ Security: PASSED"

      - name: ❌ CI Failure
        if: failure()
        run: |
          echo "💥 CI pipeline failed!"
          echo "Please check the logs above and fix the issues."
          exit 1

  # Job adicional para verificar que el servidor puede iniciarse
  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: backend-ci
    if: github.event_name == 'pull_request'
    
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build project
        run: pnpm run build

      - name: 🚀 Start server (smoke test)
        run: |
          # Crear un .env temporal para el test
          echo "NODE_ENV=test" > .env
          echo "PORT=3001" >> .env
          echo "CORS_ORIGIN=http://localhost:3000" >> .env
          
          # Iniciar servidor en background
          timeout 30s pnpm start &
          SERVER_PID=$!
          
          # Esperar a que el servidor inicie
          sleep 10
          
          # Verificar que el servidor responde
          curl -f http://localhost:3001/api/health || exit 1
          curl -f http://localhost:3001/api || exit 1
          
          # Terminar servidor
          kill $SERVER_PID || true
          
          echo "✅ Smoke test passed - Server starts and responds correctly"